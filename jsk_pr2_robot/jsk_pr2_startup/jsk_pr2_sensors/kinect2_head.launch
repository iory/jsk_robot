<launch>
  <arg name="camera"            default="kinect_head" />
  <arg name="rgb"               default="rgb" />
  <arg name="ir"                default="ir" />
  <arg name="depth"             default="depth" />
  <arg name="depth_registered"  default="depth_registered" />
  <arg name="base_name"         default="head_mount_kinect"/>
  <arg name="sensor"            default=""/>
  <arg name="publish_tf"        default="false"/>
  <arg name="base_name_tf"      default="$(arg base_name)"/>
  <arg name="fps_limit"         default="-1.0"/>
  <arg name="calib_path"        default="/etc/ros/calib"/>
  <arg name="use_png"           default="false"/>
  <arg name="jpeg_quality"      default="90"/>
  <arg name="png_level"         default="1"/>
  <arg name="depth_method"      default="cuda"/>
  <arg name="depth_device"      default="-1"/>
  <arg name="reg_method"        default="default"/>
  <arg name="reg_device"        default="-1"/>
  <arg name="max_depth"         default="12.0"/>
  <arg name="min_depth"         default="0.1"/>
  <arg name="queue_size"        default="5"/>
  <arg name="bilateral_filter"  default="true"/>
  <arg name="edge_aware_filter" default="true"/>
  <arg name="worker_threads"    default="8"/>
  <arg name="machine"           default="localhost"/>
  <arg name="nodelet_manager"   default="$(arg base_name)"/>

  <arg name="start_manager"     default="true"/>
  <arg name="use_machine"       default="true"/>
  <arg name="respawn"           default="true"/>
  <arg name="use_nodelet"       default="true"/>
  <arg name="output"            default="screen"/>

  <machine name="localhost" address="localhost" if="$(arg use_machine)"/>

  <node name="$(arg nodelet_manager)"
        pkg="nodelet" type="nodelet"
        args="manager"
        if="$(arg start_manager)"
        machine="$(arg machine)"
        output="screen"/>

  <!-- Nodelet version of kinect2_bridge -->
  <node name="$(arg base_name)_bridge"
        pkg="nodelet" type="nodelet"
        machine="$(arg machine)"
        args="load kinect2_bridge/kinect2_bridge_nodelet $(arg nodelet_manager)"
        respawn="$(arg respawn)" output="$(arg output)" if="$(arg use_nodelet)" >
    <param name="base_name"         type="str"    value="$(arg base_name)"/>
    <param name="sensor"            type="str"    value="$(arg sensor)"/>
    <param name="publish_tf"        type="bool"   value="$(arg publish_tf)"/>
    <param name="base_name_tf"      type="str"    value="$(arg base_name_tf)"/>
    <param name="fps_limit"         type="double" value="$(arg fps_limit)"/>
    <param name="calib_path"        type="str"    value="$(arg calib_path)"/>
    <param name="use_png"           type="bool"   value="$(arg use_png)"/>
    <param name="jpeg_quality"      type="int"    value="$(arg jpeg_quality)"/>
    <param name="png_level"         type="int"    value="$(arg png_level)"/>
    <param name="depth_method"      type="str"    value="$(arg depth_method)"/>
    <param name="depth_device"      type="int"    value="$(arg depth_device)"/>
    <param name="reg_method"        type="str"    value="$(arg reg_method)"/>
    <param name="reg_device"        type="int"    value="$(arg reg_device)"/>
    <param name="max_depth"         type="double" value="$(arg max_depth)"/>
    <param name="min_depth"         type="double" value="$(arg min_depth)"/>
    <param name="queue_size"        type="int"    value="$(arg queue_size)"/>
    <param name="bilateral_filter"  type="bool"   value="$(arg bilateral_filter)"/>
    <param name="edge_aware_filter" type="bool"   value="$(arg edge_aware_filter)"/>
    <param name="worker_threads"    type="int"    value="$(arg worker_threads)"/>
  </node>

  <!-- Node version of kinect2_bridge -->
  <node name="$(arg base_name)_bridge"
        pkg="kinect2_bridge" type="kinect2_bridge"
        machine="$(arg machine)"
        respawn="$(arg respawn)"
        output="$(arg output)"
        unless="$(arg use_nodelet)">
    <param name="base_name"         type="str"    value="$(arg base_name)"/>
    <param name="sensor"            type="str"    value="$(arg sensor)"/>
    <param name="publish_tf"        type="bool"   value="$(arg publish_tf)"/>
    <param name="base_name_tf"      type="str"    value="$(arg base_name_tf)"/>
    <param name="fps_limit"         type="double" value="$(arg fps_limit)"/>
    <param name="calib_path"        type="str"    value="$(arg calib_path)"/>
    <param name="use_png"           type="bool"   value="$(arg use_png)"/>
    <param name="jpeg_quality"      type="int"    value="$(arg jpeg_quality)"/>
    <param name="png_level"         type="int"    value="$(arg png_level)"/>
    <param name="depth_method"      type="str"    value="$(arg depth_method)"/>
    <param name="depth_device"      type="int"    value="$(arg depth_device)"/>
    <param name="reg_method"        type="str"    value="$(arg reg_method)"/>
    <param name="reg_device"        type="int"    value="$(arg reg_device)"/>
    <param name="max_depth"         type="double" value="$(arg max_depth)"/>
    <param name="min_depth"         type="double" value="$(arg min_depth)"/>
    <param name="queue_size"        type="int"    value="$(arg queue_size)"/>
    <param name="bilateral_filter"  type="bool"   value="$(arg bilateral_filter)"/>
    <param name="edge_aware_filter" type="bool"   value="$(arg edge_aware_filter)"/>
    <param name="worker_threads"    type="int"    value="$(arg worker_threads)"/>
    <remap from="$(arg base_name)" to="kinect_head" />
  </node>

  <!-- sd point cloud (512 x 424) -->
  <node name="$(arg base_name)_points_xyzrgb_sd"
        pkg="nodelet" type="nodelet"
        machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)"
        respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/sd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/sd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/sd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/sd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>

  <!-- qhd point cloud (960 x 540) -->
  <node name="$(arg base_name)_points_xyzrgb_qhd"
        pkg="nodelet" type="nodelet"
        machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)"
        respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/qhd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/qhd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/qhd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/qhd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>

  <!-- hd point cloud (1920 x 1080) -->
  <node name="$(arg base_name)_points_xyzrgb_hd"
        pkg="nodelet" type="nodelet"
        machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)"
        respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/hd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/hd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/hd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/hd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>

  <!-- for kinect compatibility -->
  <group ns="$(arg camera)">
    <group ns="$(arg rgb)">
      <node name="relay_camera_info"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/camera_info /$(arg camera)/$(arg rgb)/camera_info" />
      <node name="relay_image_rect"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/image_color_rect /$(arg camera)/$(arg rgb)/image_rect_color" />
      <node name="relay_image_rect_compressed"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/image_color_rect/compressed /$(arg camera)/$(arg rgb)/image_rect_color/compressed" />
    </group>
    <group ns="$(arg ir)">
      <node name="relay_camera_info"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/camera_info /$(arg camera)/$(arg ir)/camera_info" />
      <node name="relay_image_raw"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/image_ir /$(arg camera)/$(arg ir)/image_raw" />
      <node name="relay_image_raw_compressed"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/image_ir/compressed /$(arg camera)/$(arg ir)/image_raw/compressed" />
      <node name="relay_image_rect"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/image_ir_rect /$(arg camera)/$(arg ir)/image_rect_ir" />
      <node name="relay_image_rect_compressed"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/image_ir_rect/compressed /$(arg camera)/$(arg ir)/image_rect_ir/compressed" />
    </group>
    <group ns="$(arg depth)">
      <node name="relay_camera_info"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/camera_info /$(arg camera)/$(arg depth)/camera_info" />
    </group>
    <group ns="depth_registered">
      <node name="relay_camera_info"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/camera_info /$(arg camera)/$(arg depth_registered)/camera_info" />
      <node name="relay_depth_registered_points"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/points points" />
      <node name="relay_image_raw"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/image_depth /$(arg camera)/$(arg depth_registered)/image_raw" />
      <node name="relay_image_raw_compressed"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/image_depth/compressed /$(arg camera)/$(arg depth_registered)/image_raw/compressedDepth" />
      <node name="relay_image_rect"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/image_depth_rect /$(arg camera)/$(arg depth_registered)/image_rect" />
      <node name="relay_image_rect_compressed"
            pkg="topic_tools"
            type="relay"
            args="/$(arg base_name)/sd/image_depth_rect/compressed /$(arg camera)/$(arg depth_registered)/image_rect/compressedDepth" />
    </group>
  </group>
</launch>
